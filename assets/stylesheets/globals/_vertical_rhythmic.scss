/*
    vertical-rhythmic
    
    Version : 0.3.1
    Original Author  : Aur√©lien Delogu (dev@dreamysource.fr)
    Additional Author: Jeff Patzer (jeff@patzer.us)
    License : MIT
*/

/*
    number $base-font-size: base font-size which will be applied to the body (default: 1em)
*/
$base-font-size:    1em !default;

/*
    number $base-line-height: base line-height which will be applied to the body (default: 1.5em)
*/
$base-line-height:  1.5em !default;

/*
    Adjust a unit to be relative if in PX to allow for arithmetic
*/
@function relative-font-size($font-size:$base-font-size) {
    @if unit($font-size) == px {
        $font-size:$font-size / $base-font-size * 1em;
    }
    @return $font-size;
}

/*
    Initialize the rhythm
*/
// Establishes a font baseline for the given font-size.
@mixin establish-baseline($font-size: $base-font-size) {
  html, body {
    font-size: $font-size;
    line-height:relative-font-size($base-line-height);
  }
}


/*
    Return a rhythm

    Parameters
        integer $lines      : number of whitespace lines (default: 1)
                              You can specify "auto" value and it will generate a proportional value from the base line-height (especially useful when you want to set a good line-height value)
        number $font-size   : font size, in ems
*/
@function rhythm($lines:1,$font-size:1em){
    @if $lines == auto {
        $lines:ceil($font-size / $base-line-height);
    }
    @return $base-line-height / $font-size * $lines * 1em;
}

/*
    Return a rhythm from pixel unit

    Parameters
        integer $width      : width of the rhythm (without px unit)
        number $font-size   : font size, in ems
*/
@function px-rhythm($width:1,$font-size:1em){
    // $relative-base-font-size: relative-font-size($base-font-size);
    @if unit($width) == px {
        $width:$width / 1px;
    }
    @return $width * 0.0625 / relative-font-size($base-font-size) / relative-font-size($font-size) * 1em * 1em * 1em;
}

/*
    Set a new font-size and automatically adapt the line-height

    Parameters
        number $font-size   : font size, in ems
        integer $lines      : number of whitespace lines for the line-height
                              Keeps base line proportions by default
*/
@mixin font-size($font-size,$lines:()){
    @if $lines == () {
        $lines: ceil($font-size / $base-line-height);
    }
    font-size:$font-size;
    line-height:rhythm($lines,$font-size);
}

/*
    Add a margin around a box

    Parameters
        integer $lines          : number of whitespace lines (default: 1)
        number $font-size       : actual font-size, in ems, to calculate with (default: 1em)
        integer $border-width   : width of additionnal borders around the box
                                  Useful to substract borders from the whitespace to not break the rhythm
*/
@mixin margin($lines:1,$font-size:1em,$border-width:0){
    margin:relative-font-size(rhythm($lines,$font-size)) - px-rhythm($border-width,$font-size);
}

/*
    Add a top margin to a box

    Parameters
        integer $lines          : number of whitespace lines (default: 1)
        number $font-size       : actual font-size, in ems, to calculate with (default: 1em)
        integer $border-width   : width of additionnal borders around the box
                                  Useful to substract borders from the whitespace to not break the rhythm
*/
@mixin margin-top($lines:1,$font-size:1em,$border-width:0){
    margin-top:relative-font-size(rhythm($lines,$font-size)) - px-rhythm($border-width,$font-size);
}

/*
    Add a bottom margin to a box

    Parameters
        integer $lines          : number of whitespace lines (default: 1)
        number $font-size       : actual font-size, in ems, to calculate with (default: 1em)
        integer $border-width   : width of additionnal borders around the box
                                  Useful to substract borders from the whitespace to not break the rhythm
*/
@mixin margin-bottom($lines:1,$font-size:1em,$border-width:0){
    margin-bottom:relative-font-size(rhythm($lines,$font-size)) - px-rhythm($border-width,$font-size);
}

/*
    Add a padding around a box

    Parameters
        integer $lines          : number of whitespace lines (default: 1)
        number $font-size       : actual font-size, in ems, to calculate with (default: 1em)
        integer $border-width   : width of additionnal borders around the box
                                  Useful to substract borders from the whitespace to not break the rhythm
*/
@mixin padding($lines:1,$font-size:1em,$border-width:0){
    padding:relative-font-size(rhythm($lines,$font-size)) - px-rhythm($border-width,$font-size);
}

/*
    Add a top padding to a box

    Parameters
        integer $lines          : number of whitespace lines (default: 1)
        number $font-size       : actual font-size, in ems, to calculate with (default: 1em)
        integer $border-width   : width of additionnal borders around the box
                                  Useful to substract borders from the whitespace to not break the rhythm
*/
@mixin padding-top($lines:1,$font-size:1em,$border-width:0){
    padding-top:relative-font-size(rhythm($lines,$font-size)) - px-rhythm($border-width,$font-size);
}

/*
    Add a bottom padding to a box

    Parameters
        integer $lines          : number of whitespace lines (default: 1)
        number $font-size       : actual font-size, in ems, to calculate with (default: 1em)
        integer $border-width   : width of additionnal borders around the box
                                  Useful to substract borders from the whitespace to not break the rhythm
*/
@mixin padding-bottom($lines:1,$font-size:1em,$border-width:0){
    padding-bottom:relative-font-size(rhythm($lines,$font-size)) - px-rhythm($border-width,$font-size);
}

/*
    Add a top border around a box

    Parameters
        string $color       : color
        number $font-size   : font-size of the box (in em)
        integer $width      : border width
                              It quite equals to pixels but it depends on the base font-size of the browser, so it takes no unit
        string $type        : border type
*/
@mixin border($color,$font-size:1em,$width:1,$type:solid){
    border:px-rhythm($width,$font-size) $type $color;
}

/*
    Add a top border to a box

    Parameters
        string $color       : color
        number $font-size   : font-size of the box (in em)
        integer $width      : border width
                              It quite equals to pixels but it depends on the base font-size of the browser, so it takes no unit
        string $type        : border type
*/
@mixin border-top($color,$font-size:1em,$width:1,$type:solid){
    border-top:px-rhythm($width,$font-size) $type $color;
}

/*
    Add a bottom border to a box

    Parameters
        string $color       : color
        number $font-size   : font-size of the box (in em)
        integer $width      : border width
                              It quite equals to pixels but it depends on the base font-size of the browser, so it takes no unit
        string $type        : border type
*/
@mixin border-bottom($color,$font-size:1em,$width:1,$type:solid){
    border-bottom:px-rhythm($width,$font-size) $type $color;
}

/*
    Add an outline around a box

    Parameters
        string $color       : color
        number $font-size   : font-size of the box (in em)
        integer $width      : border width
                              It quite equals to pixels but it depends on the base font-size of the browser, so it takes no unit
        string $type        : outline type
*/
@mixin outline($color,$font-size:1em,$width:1,$type:solid){
    outline:px-rhythm($width,$font-size) $type $color;
}